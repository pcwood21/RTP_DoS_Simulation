clear all;
expall_init;
atkFreeRevenue =    0.3150;


atkDi=calcDI(50);
attackTestPrHist=zeros(length(timeTrainDay),1);
attackTestRPHist=zeros(length(timeTrainDay),1);
Pr=50*ones(length(atkDi),1);
attackVect=zeros(length(atkDi),1);
maxAttack=10;
PrDiffWindow=10;
lastDecTime=1;

maxDec=floor((max(timeTrainDay)-min(timeTrainDay))/T_w)+1;

ann_targetHist=zeros(maxDec,length(attackVect));
ann_prDiff=zeros(maxDec,1);
PrLastDec=0;
ann_prHist=zeros(maxDec,T_w/10);
for i=1:length(timeTrainDay)
    time=timeTrainDay(i);
    newPr=ISO.processPrices(0);
    Pr(attackVect==0)=newPr;
    RP=abs(flexP(Pr)+errorScaled(time));
    ISO.clientPower=RP;
    

   
    if ~isempty(ISO.OPT.getX())
            attackTestPrHist(i)=ISO.OPT.getX();
            attackTestRPHist(i)=-flexP(ISO.OPT.getX())+errorScaled(time);
        else
            attackTestPrHist(i)=newPr;
            attackTestRPHist(i)=-flexP(newPr)+errorScaled(time);
    end

    decTime=floor((time-min(timeTrainDay))/T_w)+1;
    if decTime==lastDecTime
        continue;
    end
    lastDecTime=decTime;
    
    
    ann_targetHist(decTime,:)=attackVect;
    ann_prDiff(decTime)=attackTestPrHist(i)-PrLastDec;
    PrLastDec=attackTestPrHist(i);
    ann_prHist(decTime,:)=attackTestPrHist(i-T_w/10+1:i)';
    
    targets=randperm(length(attackVect),maxAttack);
    attackVect=zeros(length(attackVect),1);
    attackVect(targets)=1;

end

ann_prHist(1,:)=[];
ann_prDiff(1)=[];
ann_targetHist(1,:)=[];

ann_inputs=[ann_prHist ann_targetHist];
ann_outputs=[ann_prDiff];

%nnstart


% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created Mon Dec 07 02:19:14 EST 2015
%
% This script assumes these variables are defined:
%
%   ann_inputs - input data.
%   ann_outputs - target data.

x = ann_inputs';
t = ann_outputs';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. NFTOOL falls back to this in low memory situations.
trainFcn = 'trainbr';  % Bayesian Regularization

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotfit(net,x,t)
%figure, plotregression(t,y)
%figure, ploterrhist(e)

prdiffnet=net;

price_hist=ann_prHist(1500,:);
bestIncAtkFun=@(x) -1*prdiffnet([price_hist'; x']);
bestDecAtkFun=@(x) prdiffnet([price_hist'; x']);

gaopt=gaoptimset('Generations',30,'UseParallel',1);
A=ones(2,length(attackVect));
A(2,:)=-1;
b=[10; -10;];
[bestIncTargets,IncAmount]=ga(bestIncAtkFun,length(attackVect),A,b,[],[],zeros(1,length(attackVect)),ones(1,length(attackVect)),[],1:length(attackVect),gaopt);
%numT=sum(bestIncTargets)

[bestDecTargets,DecAmount]=ga(bestDecAtkFun,length(attackVect),A,b,[],[],zeros(1,length(attackVect)),ones(1,length(attackVect)),[],1:length(attackVect),gaopt);
%numT=sum(bestDecTargets)


%Prime market
for i=length(timeTrainDay)-1000:length(timeTrainDay)
    time=timeTrainDay(i);
    Pr=ISO.processPrices(0);
    RP=abs(flexP(Pr)+errorScaled(time));
    ISO.clientPower=RP;
end
attackTestPrHist=zeros(length(timeTestDay),1);
attackTestRPHist=zeros(length(timeTestDay),1);
atkDi=calcDI(50);
Pr=50*ones(length(atkDi),1);
attackVect=zeros(length(atkDi),1);
maxAttack=20;
PrDiffWindow=10;

decisionTimes=min(timeTestDay):T_w:max(timeTestDay);
decisionTimes=floor(decisionTimes);
decisionTimes=decisionTimes-min(decisionTimes)+1;
lastDecTime=1;
charge=NaN*ones(length(decisionTimes),1);
discharge=NaN*ones(length(decisionTimes),1);
PrBuy=90;
PrSell=120;
battE=0;
sellPR=140;
buyPR=90;
revenue=0;

for i=1:length(timeTestDay)
    time=timeTestDay(i);
    newPr=ISO.processPrices(0);
    Pr(attackVect==0)=newPr;
    RP=abs(flexP(Pr)+errorScaled(time));
    ISO.clientPower=RP;
    

   
    if ~isempty(ISO.OPT.getX())
            attackTestPrHist(i)=ISO.OPT.getX();
            attackTestRPHist(i)=-flexP(ISO.OPT.getX())+errorScaled(time);
        else
            attackTestPrHist(i)=newPr;
            attackTestRPHist(i)=-flexP(newPr)+errorScaled(time);
    end
    
    decTime=floor((time-min(timeTestDay))/T_w)+1;
    if decTime==lastDecTime
        continue;
    end
    lastDecTime=decTime;
    
    price_hist=attackTestPrHist(i-T_w/10+1:i)';
    bestIncAtkFun=@(x) -1*prdiffnet([price_hist'; x']);
    bestDecAtkFun=@(x) prdiffnet([price_hist'; x']);

    gaopt=gaoptimset('Generations',30,'UseParallel',1);
    A=ones(2,length(attackVect));
    A(2,:)=-1;
    b=[10; -10;];
    [bestIncTargets,IncAmount]=ga(bestIncAtkFun,length(attackVect),A,b,[],[],zeros(1,length(attackVect)),ones(1,length(attackVect)),[],1:length(attackVect),gaopt);
    %numT=sum(bestIncTargets)

    [bestDecTargets,DecAmount]=ga(bestDecAtkFun,length(attackVect),A,b,[],[],zeros(1,length(attackVect)),ones(1,length(attackVect)),[],1:length(attackVect),gaopt);
    %numT=sum(bestDecTargets)

    
    if newPr-DecAmount < buyPR && battE < battMaxE
        attackVect=zeros(length(atkDi),1);
        attackVect(bestDecTargets==1)=1;
        charge(decTime)=1;
        battE=battE+T_w*battchargeRate;
        revenue=revenue-newPr*T_w*battchargeRate/1000;
    elseif newPr+IncAmount > sellPR && battE > 0
        attackVect=zeros(length(atkDi),1);
        attackVect(bestIncTargets==1)=1;
        discharge(decTime)=1;
        battE=battE-T_w*battchargeRate;
        revenue=revenue+newPr*T_w*battchargeRate/1000;
    else
        attackVect=zeros(length(atkDi),1);
    end
end


figure;
hold all;
timeScale=timeTestDay/60/60-min(timeTestDay)/60/60;
plot(timeScale,attackTestPrHist,'LineWidth',1.5);
plot(timeScale(1:10:end),TestPrHist(1:10:end),'--','LineWidth',1.5);
chargeMap=floor(timeTestDay/T_w);
chargeMap=chargeMap-min(chargeMap)+1;
ychp=charge(chargeMap).*120;
plot(timeScale(1:1:end),ychp(1:1:end),'-','MarkerSize',10,'LineWidth',4);
ychp=discharge(chargeMap).*120;
plot(timeScale(1:1:end),ychp(1:1:end),'-','MarkerSize',10,'LineWidth',4);
hold off;
xlabel('Time (h)');
ylabel('Market Price ($/MWh)');
legend('Attacked Price','Baseline Price','Charge','Discharge');
set(gca,'FontSize',13);
set(gca,'FontName','Times New Roman');